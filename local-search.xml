<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SQL注入</title>
    <link href="/2024/04/18/aa/"/>
    <url>/2024/04/18/aa/</url>
    
    <content type="html"><![CDATA[<h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><h2 id="1原理"><a href="#1原理" class="headerlink" title="1原理"></a>1原理</h2><p>SQL注入的原理是将恶意的SQL命令插入到Web表单中，再提交给服务器执行。这些恶意SQL命令通常是利用APP对用户输入的数据过滤不严格，从而插入非法的SQL语句，并绕过APP的安全防护。</p><p>当攻击者在Web应用程序中注入特殊格式的SQL语句时，应用程序没有正确地过滤这些语句，就会将它们嵌入到正常的SQL查询中。这些恶意的SQL语句可能会在数据库中执行一些非预期的操作，比如获取敏感数据、修改数据或删除数据等。<br>原文链接：<a href="https://blog.csdn.net/m0_73995538/article/details/133240994">https://blog.csdn.net/m0_73995538/article/details/133240994</a></p><h2 id="2-sql注入分类"><a href="#2-sql注入分类" class="headerlink" title="2 sql注入分类"></a>2 sql注入分类</h2><p><strong>报错注入：</strong>GET基于报错的注入、POST基于错误的注入等报错注入；</p><p>​    <strong>盲注注入：</strong>基于时间(Time)的盲注、基于布尔(Boolean)的盲注</p><p>堆叠注入  </p><p>延时注入</p><p>联合查询 union 语法</p><p><strong>user-agent 注入、referer 注入、cookie注入等。</strong></p><p>注入类型有数字型注入  <strong>字符型注入点</strong>  <strong>搜索性注入点</strong></p><p>2、按照数据的提交方式<br>Get注入<br>提交数据的方式是 GET , 注入点的位置在 GET 参数部分。比如有这样的一个链接<a href="http://xxx.com/news.php?id=1">http://xxx.com/news.php?id=1</a> ，id 是注入点。<br>Post注入<br>使用 POST 方式提交数据，注入点位置在 POST 数据部分，常发生在表单中。<br>Cookie注入<br>HTTP 请求的时候会带上客户端的 Cookie， 注入点存在 Cookie 当中的某个字段中。<br>Http头部注入<br>注入点在 HTTP 请求头部的某个字段中。比如存在 User-Agent 字段中。严格讲的话，Cookie 其实应该也是算头部注入的一种形式。因为在 HTTP 请求的时候，Cookie 是头部的一个字段<br>原文链接：<a href="https://blog.csdn.net/weixin_45954730/article/details/131525362">https://blog.csdn.net/weixin_45954730/article/details/131525362</a></p><h2 id="常用函数："><a href="#常用函数：" class="headerlink" title="常用函数："></a><strong>常用函数：</strong></h2><ul><li>left(m,n) –从左向右截取字符串 m 返回其前 n 位</li><li>substr(m,1,1) –取字符串 m 的左边第一位起，1 字长的字符串</li><li>ascii(m) –返回字符 m 的 ASCII 码</li><li>base64(m)—返回字符 m 的 base64 编码 • if(str1,str2,str3)–如果 str1 正确就执行 str2，否则执行 str3</li><li>sleep(m)–使程序暂停 m 秒</li><li>length(m) –返回字符串 m 的长度</li><li>count(column_name) –返回指定列的值的数目</li></ul><h2 id="sql注入一般步骤："><a href="#sql注入一般步骤：" class="headerlink" title="sql注入一般步骤："></a><strong>sql注入一般步骤：</strong></h2><p>第一步：通过特殊的数据库查询语句</p><p>第二步：在数据库的错误返回中找到sql漏洞</p><p>第三步:利用sql语句猜解管理人员信息并登录管理员后台</p><p><strong>判断注入类型</strong></p><p><strong>数字型注入</strong></p><p>\1. url为 <a href="http://127.0.0.1/sqli-labs/Less-2/?id=1%27%E6%97%B6%EF%BC%8C%E5%9B%A0%E4%B8%BA%E6%9C%89%E4%B8%80%E4%B8%AA%E5%A4%9A%E4%BD%99%E7%9A%84%22%E5%8D%95%E5%BC%95%E5%8F%B7%22%E4%BD%BF%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5%E9%94%99%E8%AF%AF">http://127.0.0.1/sqli-labs/Less-2/?id=1&#39;时，因为有一个多余的&quot;单引号&quot;使查询语句错误</a></p><p>\2. url为 <a href="http://127.0.0.1/sqli-labs/Less-2/?id=1">http://127.0.0.1/sqli-labs/Less-2/?id=1</a> and 1&#x3D;1时，没有报错</p><p>\3. url为 <a href="http://127.0.0.1/sqli-labs/Less-2/?id=1">http://127.0.0.1/sqli-labs/Less-2/?id=1</a> and 1&#x3D;2时，由于1&#x3D;2不成立，也会报错</p><p>满足这三个，基本上就是数字注入了</p><p><strong>字符型注入</strong></p><p>\1. url为 <a href="http://127.0.0.1/sqli-labs/Less-2/?id=1%27%E6%97%B6%EF%BC%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%A4%E4%B8%BAid%E5%8F%AB%E5%81%9A1%27%E3%80%82%E6%9F%A5%E8%AF%A2%E4%B9%8B%E5%90%8E%E5%8F%91%E7%8E%B0%E6%B2%A1%E6%9C%89%E8%BF%99%E4%B8%AAid%E8%80%8C%E8%BF%94%E5%9B%9E%E9%94%99%E8%AF%AF%E3%80%82%EF%BC%88%E5%9C%A8%E5%AD%97%E7%AC%A6%E5%9E%8B%E6%B3%A8%E5%85%A5%E4%B8%AD%EF%BC%8C%E9%9C%80%E8%A6%81%E8%80%83%E8%99%91%E5%BC%95%E5%8F%B7%E7%9A%84%E9%97%AD%E5%90%88%EF%BC%89">http://127.0.0.1/sqli-labs/Less-2/?id=1&#39;时，数据库认为id叫做1&#39;。查询之后发现没有这个id而返回错误。（在字符型注入中，需要考虑引号的闭合）</a></p><p>\2. url为 <a href="http://127.0.0.1/sqli-labs/Less-2/?id=1">http://127.0.0.1/sqli-labs/Less-2/?id=1</a>‘ and ‘1’&#x3D;’1 在’1’&#x3D;’1之后没有加上’是因为传参时输入的内容已经被’ ‘包围。</p><p><strong>后台查询列数</strong></p><p>使用order by试出数据库列数</p><p>url为 <a href="http://127.0.0.1/sqli-labs/Less-2/?id=1">http://127.0.0.1/sqli-labs/Less-2/?id=1</a>‘ order by 数字 （如果试4时有错误，3时正确，那么列数为3）</p><p><strong>找显示位</strong></p><p>使用union select找出会返回客户端并显示的列。如果有3列时，应该这么写</p><p>url为 <a href="http://127.0.0.1/sqli-labs/Less-2/?id=1">http://127.0.0.1/sqli-labs/Less-2/?id=1</a>‘ union select 1,2,3</p><p>加入显示位是3，这就意味着数据库开放了5个“窗口”用来显示内容，用查询到的数据，在这些窗口显示数据</p><p><strong>查库名</strong></p><p>联合查询：select database();</p><p>下面是查看数据库的版本和数据库信息</p><p>假如显示位是3，<a href="http://127.0.0.1/sqli-labs/Less-2/?id=1">http://127.0.0.1/sqli-labs/Less-2/?id=1</a>‘ union select 1,version,database()</p><p><strong>查表名</strong></p><p>找到库名以后，使用<a href="http://127.0.0.1/sqli-labs/Less-2/?id=1">http://127.0.0.1/sqli-labs/Less-2/?id=1</a>‘ union select 1,2,table_name from information_schema.tables where table_schema&#x3D;’库名’ (如果库名是字符型，此处库名要转成十六进制)</p><p><strong>information_schema:</strong></p><p>这是一个mysql自带的库，其中保存着关于mysql服务器所维护的所有其他数据库的信息。如数据库名，数据库的表，表列的数据类型与访问权限等，所以我们查询这个库</p><p><strong>查列名</strong></p><p>找到表之后，使用<a href="http://127.0.0.1/sqli-labs/Less-2/?id=1">http://127.0.0.1/sqli-labs/Less-2/?id=1</a>‘ union select 1,2,column_name from information_schema.columns where table_name&#x3D;’表名’ (如果表名是字符型，此处库名要转成十六进制)</p><p>如果表数或列数过多，可以在最后使用limit加上limit 0，5相当于检索1-5条信息</p><p><strong>查具体数据</strong></p><p>找到列之后，使用<a href="http://127.0.0.1/sqli-labs/Less-2/?id=1">http://127.0.0.1/sqli-labs/Less-2/?id=1</a>‘ union select 1,2,group_concat(“要查询的数据”) from 表名</p><h3 id="单引号注入"><a href="#单引号注入" class="headerlink" title="单引号注入"></a>单引号注入</h3><p>传入的参数被一对单引号包围了</p><p>$query&#x3D;”select * from tables where id &#x3D; $_get[‘id’];</p><p>这条语句是通过get方法获取我们写入的参数id，然后再根据参数id执行其它语句，当我们传入参数id&#x3D;1时，那么这条语句的实际执行为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1&#x27;</span>;<br></code></pre></td></tr></table></figure><p>是当我们在id&#x3D;1后加入单引号后，明显语句变为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;id&#x27;&#x27;;</span><br></code></pre></td></tr></table></figure><p>我们在后面再加一个“–+”时，页面又恢复正常。在这里“–+”就是注释符号，将后面的单引号和其它信息注释掉了，在语句中和我们输入的单引号共同组成一对单引号，所以页面正常显示。</p><img src="/2024/04/18/aa/cs.jpg" class="" title="图片引用方法一"><p>aaaaaa</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/04/18/hello-world/"/>
    <url>/2024/04/18/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
